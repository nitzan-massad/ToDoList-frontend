{"version":3,"file":"static/js/925.9c50af92.chunk.js","mappings":"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","sources":["pages/Login/Login.js"],"sourcesContent":["import React, { useState, useContext } from 'react'\r\n\r\nimport Input from '../../Components/FormElements/Input'\r\nimport Button from '../../Components/FormElements/Button'\r\nimport {\r\n  VALIDATOR_EMAIL,\r\n  VALIDATOR_MINLENGTH,\r\n  VALIDATOR_REQUIRE\r\n} from '../../shared/validators'\r\nimport { useForm } from '../../shared/hooks/form-hook'\r\nimport './Login.css'\r\nimport { AuthContext } from '../../shared/context/AuthContext'\r\nimport LoadingSpinner from '../../Components/LoadingSpinner/LoadingSpinner'\r\nimport ErrorModal from '../../Components/ErrorModal/ErrorModal'\r\nimport { useHtppClient } from '../../shared/hooks/http-hook'\r\n\r\nconst Login = () => {\r\n  const [isLoginMode, setIsLoginMode] = useState(true)\r\n  const { isLoading, error, sendRequest, clearError } = useHtppClient()\r\n  const auth = useContext(AuthContext)\r\n\r\n  const switchModeHandler = () => {\r\n    if (!isLoginMode) {\r\n      setFormData(\r\n        {\r\n          ...formState.inputs,\r\n          firstName: undefined,\r\n          lastName: undefined\r\n        },\r\n        formState.inputs.email.isValid && formState.inputs.password.isValid\r\n      )\r\n    } else {\r\n      setFormData(\r\n        {\r\n          ...formState.inputs,\r\n          firstName: {\r\n            value: '',\r\n            isValid: false\r\n          },\r\n          lastName: {\r\n            value: '',\r\n            isValid: false\r\n          }\r\n        },\r\n        false\r\n      )\r\n    }\r\n    setIsLoginMode(prevMode => !prevMode)\r\n  }\r\n\r\n  const [formState, inputHandler, setFormData] = useForm(\r\n    {\r\n      email: {\r\n        value: '',\r\n        isValid: false\r\n      },\r\n      password: {\r\n        value: '',\r\n        isValid: false\r\n      }\r\n    },\r\n    false\r\n  )\r\n\r\n  const authSubmitHandler = async event => {\r\n    event.preventDefault()\r\n\r\n    if (isLoginMode) {\r\n      try {\r\n        const responseData = await sendRequest(\r\n          '/api/users/login',\r\n          'POST',\r\n          {\r\n            email: formState.inputs.email.value,\r\n            password: formState.inputs.password.value\r\n          },\r\n          { 'Content-Type': 'application/json' }\r\n        )\r\n        auth.login(responseData.userId,responseData.firstName,responseData.lastName, responseData.token)\r\n      } catch (err) {}\r\n    } else {\r\n      try {\r\n        const responseData = await sendRequest(\r\n          '/api/users/signup',\r\n          'POST',\r\n          {\r\n            firstName: formState.inputs.firstName.value,\r\n            lastName: formState.inputs.lastName.value,\r\n            email: formState.inputs.email.value,\r\n            password: formState.inputs.password.value\r\n          },\r\n          {\r\n            'Content-Type': 'application/json'\r\n          }\r\n        )\r\n        auth.login(responseData.userId,responseData.firstName,responseData.lastName, responseData.token)\r\n      } catch (err) {}\r\n    }\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <ErrorModal error={error} onClear={clearError} />\r\n      <div className='authentication'>\r\n        {isLoading && <LoadingSpinner asOverlay />}\r\n        <h2> {isLoginMode ? 'LOGIN' : 'SIGNUP'}</h2>\r\n        <form onSubmit={authSubmitHandler}>\r\n          {!isLoginMode && (\r\n            <div className='login-last-name-first-name__div'>\r\n              <Input\r\n                element='input'\r\n                id='firstName'\r\n                type='text'\r\n                label='First Name'\r\n                validators={[VALIDATOR_REQUIRE()]}\r\n                errorText='Please enter a first name.'\r\n                onInput={inputHandler}\r\n              />\r\n              <Input\r\n                element='input'\r\n                id='lastName'\r\n                type='text'\r\n                label='Last Name'\r\n                validators={[VALIDATOR_REQUIRE()]}\r\n                errorText='Please enter a last name.'\r\n                onInput={inputHandler}\r\n              />\r\n            </div>\r\n          )}\r\n          <Input\r\n            element='input'\r\n            id='email'\r\n            type='email'\r\n            label='E-Mail'\r\n            validators={[VALIDATOR_EMAIL()]}\r\n            errorText='Please enter a valid email address.'\r\n            onInput={inputHandler}\r\n          />\r\n          <Input\r\n            element='input'\r\n            id='password'\r\n            type='password'\r\n            label='Password'\r\n            validators={[VALIDATOR_MINLENGTH(6)]}\r\n            errorText='Please enter a valid password, at least 6 characters.'\r\n            onInput={inputHandler}\r\n          />\r\n          <Button type='submit' disabled={!formState.isValid}>\r\n            {isLoginMode ? 'LOGIN' : 'SIGNUP'}\r\n          </Button>\r\n          <br />\r\n        </form>\r\n        <button\r\n          className='switch-login-signup__btn'\r\n          inverse='true'\r\n          onClick={switchModeHandler}\r\n        >\r\n          SWITCH TO {isLoginMode ? 'SIGNUP' : 'LOGIN'}\r\n        </button>\r\n      </div>\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nexport default Login\r\n"],"names":["_useState","useState","_useState2","_slicedToArray","isLoginMode","setIsLoginMode","_useHtppClient","useHtppClient","isLoading","error","sendRequest","clearError","auth","useContext","AuthContext","_useForm","useForm","email","value","isValid","password","_useForm2","formState","inputHandler","setFormData","authSubmitHandler","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","event","responseData","_responseData","wrap","_context","prev","next","preventDefault","inputs","sent","login","userId","firstName","lastName","token","t0","t1","stop","_x","apply","arguments","_jsxs","React","children","_jsx","ErrorModal","onClear","className","LoadingSpinner","asOverlay","onSubmit","Input","element","id","type","label","validators","VALIDATOR_REQUIRE","errorText","onInput","VALIDATOR_EMAIL","VALIDATOR_MINLENGTH","Button","disabled","inverse","onClick","_objectSpread","undefined","prevMode"],"sourceRoot":""}