{"version":3,"file":"static/js/267.d625c799.chunk.js","mappings":"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","sources":["pages/ListView/AddItemBox/AddItemBox.js","shared/hooks/ItemView-hook.js","pages/ListView/ItemList/ItemView.js","pages/ListView/ListView.js"],"sourcesContent":["import React, { useRef } from 'react'\r\nimport Box from '@mui/material/Box'\r\nimport TextField from '@mui/material/TextField'\r\nimport Fab from '@mui/material/Fab'\r\nimport AddIcon from '@mui/icons-material/Add'\r\nimport './AddItemBox.css'\r\n\r\nexport default function AddItemBox (props) {\r\n\r\n\r\n\r\n  return (\r\n    <div className='main-div-Add-item-box__div'>\r\n      <form >\r\n        <Box sx={{ width: 400, maxWidth: '100%' }}>\r\n          <TextField\r\n            fullWidth\r\n            label='Insert New Item'\r\n            id='insertNewItem'\r\n            inputRef={props.textRef}\r\n          />\r\n        </Box>\r\n        <Box sx={{ '& > :not(style)': { m: 1 } }}>\r\n          <Fab color='primary' aria-label='add'>\r\n            <AddIcon onClick={props.HandleAddItem} />\r\n          </Fab>\r\n        </Box>\r\n      </form>\r\n    </div>\r\n  )\r\n}\r\n","import { useState, useRef, useReducer } from 'react'\r\nimport { useHistory } from 'react-router-dom'\r\nimport { useHtppClient } from './http-hook'\r\n/*\r\nconst itemListReducer = (state, action) => {\r\n    console.log('before crashh')\r\n    switch (action.type) {\r\n      case 'ADD_ITEM':\r\n        return {\r\n          ...state,\r\n          items: [action.newItem].concat(state.items)\r\n        }\r\n      default:\r\n        console.log('what the fucckkkk')\r\n\r\n    }\r\n  }\r\n*/\r\nexport const useItemView = (color, items) => {\r\n  const [listColor, setListColor] = useState(color)\r\n  const { isLoading, error, sendRequest, clearError } = useHtppClient()\r\n  const [showConfirmModal, setShowConfirmModal] = useState(false)\r\n  const history = useHistory()\r\n  const addNewItemTextRef = useRef('')\r\n /* const [listData, dispatchListData] = useReducer(itemListReducer, {\r\n    items: items?.sort(\r\n      (a, b) => new Date(b.creationDate) - new Date(a.creationDate)\r\n    )\r\n  })\r\n*/\r\n  const handleListColorChange = async (newColor, listId) => {\r\n    setListColor(newColor)\r\n    try {\r\n      await sendRequest(\r\n        `/update-list-color/${listId}`,\r\n        'PATCH',\r\n        {\r\n          color: newColor\r\n        },\r\n        {\r\n          'Content-Type': 'application/json'\r\n        }\r\n      )\r\n    } catch (err) {}\r\n  }\r\n  const handleDeleteList = async listId => {\r\n    setShowConfirmModal(false)\r\n    try {\r\n      await sendRequest(`/delete-list/${listId}`, 'DELETE')\r\n      history.push('/')\r\n    } catch (err) {}\r\n  }\r\n  const handleAddItemToList = async listId => {\r\n    try {\r\n      const responseData = await sendRequest(\r\n        `/add-item-to-list`,\r\n        'POST',\r\n        {\r\n          itemTitle: addNewItemTextRef.current.value,\r\n          listId: listId\r\n        },\r\n        {\r\n          'Content-Type': 'application/json'\r\n        }\r\n      )\r\n     /* dispatchListData({\r\n        type: 'ADD_ITEM',\r\n        newItem: responseData.newItemResponse\r\n      })*/\r\n      addNewItemTextRef.current.value = ''\r\n    } catch (err) {}\r\n  }\r\n\r\n  const handleItemCheckOrUncheck = async (itemId, value) => {\r\n    try {\r\n      const responseData = await sendRequest(\r\n        `/item-check-uncheck`,\r\n        'PATCH',\r\n        {\r\n          itemId,\r\n          checkUncheckBool:value\r\n        },\r\n        {\r\n          'Content-Type': 'application/json'\r\n        }\r\n      )\r\n     /* dispatchListData({\r\n        type: 'CHECK-UNCHECK-ITEM',\r\n        itemId,value\r\n      })*/\r\n    } catch (err) {}\r\n  }\r\n\r\n  return {\r\n    //dispatchListData,\r\n    handleListColorChange,\r\n    handleAddItemToList,\r\n    handleDeleteList,\r\n    clearError,\r\n    handleItemCheckOrUncheck,\r\n    //listData,\r\n    listColor,\r\n    isLoading,\r\n    error,\r\n    showConfirmModal,\r\n    addNewItemTextRef\r\n  }\r\n}\r\n","import React, { useReducer } from 'react'\r\nimport List from '@mui/material/List'\r\nimport ListItem from '@mui/material/ListItem'\r\nimport ListItemButton from '@mui/material/ListItemButton'\r\nimport ListItemText from '@mui/material/ListItemText'\r\nimport ListItemAvatar from '@mui/material/ListItemAvatar'\r\nimport Checkbox from '@mui/material/Checkbox'\r\nimport Avatar from '@mui/material/Avatar'\r\n\r\nimport AddItemBox from '../AddItemBox/AddItemBox'\r\nimport { useHtppClient } from '../../../shared/hooks/http-hook'\r\nimport { useItemView } from '../../../shared/hooks/ItemView-hook'\r\n\r\nconst ItemView = props => {\r\n\r\n  return (\r\n    <List\r\n      dense\r\n      sx={{ width: '100%', maxWidth: 360, bgcolor: 'background.paper' }}\r\n    >\r\n      {props.itemList?.map(item => {\r\n        return (\r\n          <ListItem\r\n            key={item.id}\r\n            secondaryAction={\r\n              <Checkbox\r\n                edge='end'\r\n                onChange={()=>{props.handleCheckUncheck(item)}}\r\n                checked={item.isDone}\r\n              />\r\n            }\r\n            disablePadding\r\n          >\r\n            <ListItemButton>\r\n              <ListItemAvatar>\r\n                <Avatar\r\n                  alt={`Avatar n°${item + 1}`}\r\n                  src={`/static/images/avatar/${item + 1}.jpg`}\r\n                />\r\n              </ListItemAvatar>\r\n              <ListItemText primary={`${item.itemTitle}`} />\r\n            </ListItemButton>\r\n          </ListItem>\r\n        )\r\n      })}\r\n    </List>\r\n  )\r\n}\r\n\r\nexport default ItemView\r\n","import React, { useState, useReducer, useRef } from 'react'\r\nimport { useLocation, useHistory } from 'react-router-dom'\r\nimport IconButton from '@mui/material/IconButton'\r\nimport DeleteIcon from '@mui/icons-material/Delete'\r\n\r\nimport ColorPicker from '../../Components/ColorPicker/ColorPicker'\r\nimport Button from '../../Components/FormElements/Button'\r\nimport { useHtppClient } from '../../shared/hooks/http-hook'\r\nimport LoadingSpinner from '../../Components/LoadingSpinner/LoadingSpinner'\r\nimport ErrorModal from '../../Components/ErrorModal/ErrorModal'\r\nimport Modal from '../../Components/Modal/Modal'\r\nimport ItemView from './ItemList/ItemView'\r\nimport AddItemBox from './AddItemBox/AddItemBox'\r\nimport './ListView.css'\r\n\r\nconst itemListReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case 'ADD_ITEM':\r\n      console.log('hadas is the queen:' + JSON.stringify(action.newItem))\r\n      return {\r\n        ...state,\r\n        items: [action.newItem].concat(state.items)\r\n      }\r\n    case 'CHECK-UNCHECK-ITEM':\r\n      const itemsToUpdate = state.items\r\n      const currentIndex2 = itemsToUpdate.findIndex(\r\n        item => item.id == action.itemId\r\n      )\r\n      itemsToUpdate[currentIndex2].isDone = action.valueToUpdate\r\n      return {\r\n        ...state,\r\n        items: itemsToUpdate\r\n      }\r\n    default:\r\n      throw new Error()\r\n  }\r\n}\r\n\r\nconst ListView = () => {\r\n  const location = useLocation()\r\n  const { data } = location.state\r\n  const [listColor, setListColor] = useState(data.listColor)\r\n  const [showConfirmModal, setShowConfirmModal] = useState(false)\r\n  const { isLoading, error, sendRequest, clearError } = useHtppClient()\r\n  const history = useHistory()\r\n  const addNewItemTextRef = useRef('')\r\n\r\n  const [listData, dispatchListData] = useReducer(itemListReducer, {\r\n    items: data.items?.sort(\r\n      (a, b) => new Date(b.creationDate) - new Date(a.creationDate)\r\n    )\r\n  })\r\n\r\n  if (listColor !== data.listColor) {\r\n    setListColor(data.listColor)\r\n  }\r\n\r\n  const showDeleteWarningHandler = () => {\r\n    setShowConfirmModal(true)\r\n  }\r\n\r\n  const cancelDeleteHandler = () => {\r\n    setShowConfirmModal(false)\r\n  }\r\n\r\n  const handleListColorChange = async newColor => {\r\n    setListColor(newColor)\r\n    try {\r\n      await sendRequest(\r\n        `/update-list-color/${data?.listId}`,\r\n        'PATCH',\r\n        {\r\n          color: newColor\r\n        },\r\n        {\r\n          'Content-Type': 'application/json'\r\n        }\r\n      )\r\n    } catch (err) {}\r\n  }\r\n  const handleDeleteList = async () => {\r\n    setShowConfirmModal(false)\r\n    try {\r\n      await sendRequest(`/delete-list/${data?.listId}`, 'DELETE')\r\n      history.push('/')\r\n    } catch (err) {}\r\n  }\r\n  const handleAddItemToList = async () => {\r\n    try {\r\n      const responseData = await sendRequest(\r\n        `/add-item-to-list`,\r\n        'POST',\r\n        {\r\n          itemTitle: addNewItemTextRef.current.value,\r\n          listId: data.listId\r\n        },\r\n        {\r\n          'Content-Type': 'application/json'\r\n        }\r\n      )\r\n      dispatchListData({\r\n        type: 'ADD_ITEM',\r\n        newItem: responseData.newItemResponse\r\n      })\r\n      addNewItemTextRef.current.value = ''\r\n    } catch (err) {}\r\n  }\r\n\r\n  const handleItemCheckOrUncheck = async item => {\r\n    try {\r\n      const valueToUpdate = !item.isDone\r\n      dispatchListData({\r\n        type: 'CHECK-UNCHECK-ITEM',\r\n        itemId: item.id,\r\n        valueToUpdate: valueToUpdate\r\n      })\r\n      const responseData = await sendRequest(\r\n        `/item-check-uncheck`,\r\n        'PATCH',\r\n        {\r\n          itemId: item.id,\r\n          checkUncheckBool: valueToUpdate\r\n        },\r\n        {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        false\r\n      )\r\n    } catch (err) {}\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Modal\r\n        show={showConfirmModal}\r\n        onCancel={cancelDeleteHandler}\r\n        header='Are you sure?'\r\n        footerClass='place-item__modal-actions'\r\n        footer={\r\n          <React.Fragment>\r\n            <Button inverse onClick={cancelDeleteHandler}>\r\n              CANCEL\r\n            </Button>\r\n            <Button danger onClick={handleDeleteList}>\r\n              DELETE\r\n            </Button>\r\n          </React.Fragment>\r\n        }\r\n      ></Modal>\r\n      <ErrorModal error={error} onClear={clearError} />\r\n      <div>\r\n        {isLoading && <LoadingSpinner asOverlay />}\r\n        <h1 className='list-view-list-name__h1'>{data?.listTitle}</h1>\r\n        <div className='list-view-top-bar__div'>\r\n          <div className='delete-btn__list-view'>\r\n            <ColorPicker\r\n              pickedAction={handleListColorChange}\r\n              initialColorChoice={listColor}\r\n            />\r\n            <IconButton aria-label='delete' onClick={showDeleteWarningHandler}>\r\n              <DeleteIcon />\r\n            </IconButton>\r\n          </div>\r\n          <div>\r\n            <AddItemBox\r\n              HandleAddItem={handleAddItemToList}\r\n              textRef={addNewItemTextRef}\r\n            />\r\n          </div>\r\n        </div>\r\n        <ItemView\r\n          itemList={listData.items}\r\n          handleCheckUncheck={handleItemCheckOrUncheck}\r\n        ></ItemView>\r\n      </div>\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nexport default ListView\r\n"],"names":["AddItemBox","props","_jsx","className","children","_jsxs","Box","sx","width","maxWidth","TextField","fullWidth","label","id","inputRef","textRef","m","Fab","color","AddIcon","onClick","HandleAddItem","_props$itemList","List","dense","bgcolor","itemList","map","item","ListItem","secondaryAction","Checkbox","edge","onChange","handleCheckUncheck","checked","isDone","disablePadding","ListItemButton","ListItemAvatar","Avatar","alt","concat","src","ListItemText","primary","itemTitle","itemListReducer","state","action","type","console","log","JSON","stringify","newItem","_objectSpread","items","itemsToUpdate","currentIndex2","findIndex","itemId","valueToUpdate","Error","_data$items","data","useLocation","_useState","useState","listColor","_useState2","_slicedToArray","setListColor","_useState3","_useState4","showConfirmModal","setShowConfirmModal","_useHtppClient","useHtppClient","isLoading","error","sendRequest","clearError","history","useHistory","addNewItemTextRef","useRef","_useReducer","useReducer","sort","a","b","Date","creationDate","_useReducer2","listData","dispatchListData","cancelDeleteHandler","handleListColorChange","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","newColor","wrap","_context","prev","next","listId","t0","stop","_x","apply","arguments","handleDeleteList","_ref2","_callee2","_context2","push","handleAddItemToList","_ref3","_callee3","responseData","_context3","current","value","sent","newItemResponse","handleItemCheckOrUncheck","_ref4","_callee4","_context4","checkUncheckBool","_x2","React","Modal","show","onCancel","header","footerClass","footer","Button","inverse","danger","ErrorModal","onClear","LoadingSpinner","asOverlay","listTitle","ColorPicker","pickedAction","initialColorChoice","IconButton","DeleteIcon","ItemView"],"sourceRoot":""}